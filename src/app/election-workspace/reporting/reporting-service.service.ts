import { Injectable, OnInit } from '@angular/core';
import { DBTransactions } from '../../db_transactions.service';
import { ManageElectionService } from '../manage-election.service';
import { http_response } from '../../shared/http_response.model';
import { Subject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ReportingServiceService implements OnInit{
  // This is the final array/matrix of pairwise preferences generated by the backend
  ia_pref_strengths: Array<[]>;
  /* example data = [
    // d[*,A], d[*,B], d[*,C], d[*,D], d[*,E]
        [null,   20,     26,     30,     22],  // d[A,*]
        [25,     null,   16,     33,     18],  // d[B,*]
        [19,     29,     null,   17,     24],  // d[C,*]
        [15,     12,     28,     null,   14],  // d[D,*]
        [23,     27,     21,     31,     null] // d[E,*]
    ];
  */
  
  ia_strongest_paths: Array<[]>; // Data structure same as pref_strengths

  ia_node_labels: Array<String>;
  /*
    sampleLabels = ["Aachis Indian", "Bowl Lab", "Chipotle", "Doc Green's", "Einstein's Bagels"];
  */

  report_data_updated = new Subject<{}>();
  
  beatpath_winner: String[];

  constructor(private trans: DBTransactions,
              private election_management: ManageElectionService) { }

  ngOnInit(){ }

  get_beatpath_election_data(){
    this.trans.get_paths_and_labels(this.election_management.election.election_id)
      .subscribe(
        (http_response: http_response) => {
          this.ia_pref_strengths = http_response.data.pref_strengths;
          this.ia_strongest_paths = http_response.data.strongest_paths;
          this.ia_node_labels = http_response.data.labels;
          this.beatpath_winner = http_response.data.winner;

          // Let components know when election data is updated and send that data.
          this.report_data_updated
            .next({
              pref_strengths: this.ia_pref_strengths.slice(),
              strongest_paths: this.ia_strongest_paths.slice(),
              labels: this.ia_node_labels.slice(),
              winner: this.beatpath_winner.slice()
              }
            );
        },
        (error) => {
          alert(error.error.text);
          console.error(error);
        }
      );
  }

  get_pref_strengths(){
    return this.ia_pref_strengths.slice();
  }
   
  get_node_labels(){
    return this.ia_node_labels.slice();
  }
}